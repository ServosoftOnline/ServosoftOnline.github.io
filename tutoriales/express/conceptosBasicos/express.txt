EXPRESS:

    - Curso basado en el video de youtube: https://www.youtube.com/watch?v=JmJ1WUoUIK4
    - Framework más popular de nodeJs que posee las siguiente características:

        - Fué unos de los primeros en aparecer.
        - Es un framework unopionated:
            - No nos indica como crear la estructura del proyecto
            - Ni como escribir el proyecto.
            -  Es más versatil y ligero que otros.

        - Permite crear aplicaciones grandes añadiendo módulos

        - Se basa en código javascript creado por otros programadores
            - Permite usar bases de programación creadas por otros desarroladores para desarrollar encima mi aplicación
            - Podría usar código de nodejs, pero tendría que estar creando mucho código desde el inicio como:
                - Para leer archivos
                - Crear rutas de servidor
                - Asegurar la aplicación
                - Subir archivos
                - etc
                - Evitan tener que estar creando este código una y otra vez

        - Permite crear tiendas vituales, redes sociales y aplicaciones webs en general
        - React, angular o view se basan en nodejs
                
    - Otros frameworks:
        - happy
        - fast afy

        - NestJs. Se considera el sucesor de express
            - Ver las diferencias con express en el video: https://www.youtube.com/watch?v=EYCrmB_JvlI
            - NestJs crea una estructura de carpetas que se suele seguir
            - Express viene con una serie de paquetes definidos, que no estoy seguro que se usen, y nestJs no
                - Con nestJs debemos elegir que paquetes utilizar y que debemos tenerlos actualizados
            - nestJs esta más influenciada por Angular.
            - nestJs usa typescript por defecto teniendo soporte nativo. Está más orientado a typescript
            - nestJs tiene una curva de aprender más pronunciada
            - express es mucho más popular y se usa más en las industrias. Es más robusto y tiene pocos cambios
            - express se podría usar en proyectos más pequeños y nestJs en proyectos que necesiten mas estructuracion
            - Si no van a escarlar demasiado es recomendable usar express
            - Trabajar en equipo se mejora con nestJs
            - Sería recomendable empezar con javascript y espress. Para despues trabajar con typescript y nestJs

        - Adonis
        - lockback

    - Stacks:
        - Son conjuntos de tecnologías para crear aplicaciones completas, todas basadas en javascript
            - stack mern incluye: MongoDbm Express, React, y Node
            - stack mean incluye: Mongodb, Express, Angular y Node.

    - Instalacion de express:
        - Instalar nodejs: npm i node o descargarlo desde ubuntu software
        - Instalar express: npm i express

    - METODOS DE COMUNICACION DEL PROTOCOLO HTTP:    
        
        - get.
            
            - El cliente obtiene algo del servidor.
            - Se usa frecuentemente en el routing al entrar en una ruta determinada.
            - Es la peticion por defecto

        - post
            - El cliente le envia datos al servidor que quizas él guarde
            - El servidor puede devolverle datos

        - put
            - El cliente trata de actualizar algo del servidor
            - Enviamos un id que localiza el servidor y actualiza todos sus datos
        
        - delete
            - El cliente trata de eliminar algo del servidor
            - Le enviamos un id, lo busca y si lo encuentra elimina los datos

        - patch
            - Es igual que el verbo put pero solo actualiza un campo, no todo el registro
        
        - all
            - Engloba a todos los métodos anteriores.
            - 

        - Como probar estos métodos:

            - El método get se prueba de una forma y el resto de otra
            - Declaro mi routing en mi archivo index.js:

                app.get('/', (req, res) => {
                    res.send('Página asociada a la raiz del proyecto cuando uso el método get')
                })

                app.get('/about', (req, res) => {
                    res.send('Página asociada al Acerca de del proyecto')
                })

                app.post('/', (req, res) => {
                    res.send('Página asociada a la raiz del proyecto cuando uso el método post')
                })

            - Para probar las rutas realizadas con get solo debo abrir el navegador, poner la ruta y ver el mensaje
            - Para probar los métodos post, put, delete, patch y el resto que valla a usar es diferente:
                - Si me encargo tambien del front hacer peticiones desde el código de front
                - En caso contario debo simular estas peticiones mediante el uso de la extension thunder client de VS
                    - Desde el icono thunder cliente creado en la columna de la izquierda creo New request
            - Para probar un metodo all puedo usar el navegador, desde el front o thunder client
                - Encontraría las ruta usando cualquier método


    - HTTP RESPONSE

        - Son las respuestas que emite el servidor creado mediante express usando el protocolo http
            - Puede responder: texto, archivos html, pdf, txt, vídeos, audios, o formatos json o xml, etc.
            - Un ejemplo de responder un objeto json. Al entrar en una ruta /user devolver información del usuario
                - la web https://jsonformatter.curiousconcept.com/ permite comprobar si un objeto json es válido

        - Los servidores creados con express devuelven un estado indicando el resultado de la operacion. Ejemplos:
            - Estado 404 significa que el servidor no encontró lo que intentaba hacer
            - Estado 500 significa error interno del servidor

            - Estado 200 indica que fue todo bien y el servidor responde con algo.
                - A veces aparece este código de estado despues de actualizar y antes devolvía otro codigo de estado
                - Esto significa que la segunda vez, cuando refresca, se almacenó ya el dato en la cache

            - Estado 204 indica que fue todo bien pero el servidor no devuelve nada.            
                - Devolvería solo el estado y ningun dato
                - Para ello usaría le método sendStatus(Codigo de estado)

            - Estado 304 indica que se esta pidiendo un datos que no ha sido modificado
            - Puedo enviar el código de estado que considero si uso el método sendStatus
                - Ver como se hace en la ruta /isAlive mediante el metodo get en index.js

                    
    - REQUEST BODY
    
        - Durante una peticion desde el cliente se pueden enviar distintos tipos de datos al servidor:

            - Como textos, objetos jason, archivos o datos a partir de un formulario del front
            - Estas peticiones se realizarían mediante el metodo post ya que se van a enviar datos
            
            - Mediante el método use le debo indicar el dato que recibirá el servidor:
                - Si recibe un string => app.use(express.text())
                - Si recibe un json => app.use(express.json()) 
                - Si recibe datos de un formulario => app.use(express.urlencoded({extended: false}))
                    - extended: false indica que no debe interpretar nada. Ningun dato recibido es complicado


            - Estas peticiones las puedo considerar como un objeto llamado request con el siguiente contenido:
                - endpoint. Sería la url que ha sido visitada
                - body. Sería el dato enviado, generalmente un objeto json.
                - header. Contendría información adicional como el tipo de dato enviado

            - Las respuestas de un servidor las obtenemos mediante un objeto llamado response
                - Este tendría la misma estructura que el objeto request anterior. (endpoint, body y header)
                - Y el código del estado vendría dentro del header como información adicional

        - Podemos usar un cliente rest para simular estos envios desde el cliente añadiendo datos.
            - El cliente rest podría ser la extension thunder client de VS antes mencionado
            - Simulando el envio por el método que sea, añadiendo el endpoint
            - Selecciono Body y el tipo de dato que simulo enviar y su contenido
            - El header lo añadirá thunder client de forma automática. Desde el front tendré que enviarlas yo.
            - Para simular el envio de datos mediante un formulario debo seleccionar body/form-encode

    - REQUEST PARAMS
        
        - Permite realizar peticiones con rutas dinámicas.
        - Se enviarán como un objeto con sus conjuntos propiedad-valor
        - En la ruta añado : seguido del nombre de la propiedad y así declaro que es dinámica
        - Usaré el metodo params desde el servidor para obtenerlos
        - Desde el navegador pasaré el valor
        - Me va a permitir envias IDs desde la barra del navegador y capturarlos desde el servidor
        - Todo parámetro recibido es un string
            - Si quiero cambiarle su tipo uso parseInt, parseFloat, etc

    - QUERIES
    
        - Permite declarar variables y enviarlas al backend anteponiendo el caracter ?vbleEnvidada=valorEnviado
        - Desde el navegador escribimos una ruta como esta: http://localhost:3000/ruta?x=20
        - En el backend uso el metodo query y obtengo un objeto cuya propiedad es vbleEnviada y su valor es valorEnviado
            - El valor se recibe como un string al igual que en resquest params
        
        - Puedo añadir mas variables añadiendo un & por ejemplo ?vble1=valorVble1&vble2=valorVble2     
        - Puedo enviar mas de un dato en una sola vble por ejemplo ?vble1=valor1&vble1=valor2
            - El servidor recibe un objeto cuya propiedad es vble1 y su valor es una array formado por valor1 y valor2

        - Puedo acceder a las variables directamente usando el metodo query.vble

    - FUNCION MIDDLEWARE

        - Son funciones intermedias creadas por mí o importadas desde express que pueden ejecutarse en express
        - Función que se ejecuta antes de acceder a las rutas declaradas en el backend:
            - Suele usarse para registrar informacion que llega al servidor (logging y loggers)
                - A esta accion se le llama logging
                - A las funciones que registrar los datos se les llama loggers
                - Esta informacion registrada suelen ser rutas, metodos, ...

        - Implica el uso del metodo use en cuyo interior ejecutamos una función que no es necesario llamarla
        - La declaro al principio del servidor de tal forma que todas las peticiones pasarán antes por ella        

        - Dispone de un parámetro extra ademas de request y response que se llama next, que es una funcion

            - Sirve para que una vez se ejecute continue leyendo las rutas
            - Es obligatorio su presencia en los middlewares           
            
            - Es una función muy importante para tener control en el routing. 
                - La llamo cuando quiero que continue leyendo la siguiente ruta
                - Si no la llamo enviaré una respuesta al cliente y acabará la lectura del routing

            - Las funciones usadas en el routing que no son middlewares tambien pueden tener la funcion next()
                - Avanzando así en el routing llegado a este punto
                - No es frecuente

        - Puedo usar un middleware para proteger rutas:   

            - No tengo porque declarar todas los middlewares y despues las rutas.            
            - Puedo tener un middleware que obtenga información que llega al servidor
            - Declarar las rutas de acceso publico para todos los usuarios
            - Tener otro middleware que verifique si un usuario está registrado en la bbdd.
                - Si el usuario está registrado llamo a la funcion next y continuo con las rutas privadas
                    - Las rutas que sean privadas iran a continuacion de este segundo middleware
                    - Protegiendo estas rutas y dejando solo acceso a ellas a los usuarios registrados
                - Si no lo está el servidor devuelve una respuesta de usuario no registrado y no ejecuta la funcion next()

        - Existen paquetes que permiten añadir middleware externas desde express

            - Se suelen conocer a traves de la comunidad

            - Un ejemplo de middleware externo es morgan

                - Permite ver por consola las peticiones que van llegando
                - Evitar tener que crear un logger a mano.

                - Instalacion:

                    - Escribir en consola: npm i morgan
                    - Requerirlo: const morgan = require('morgan')
                    - Sustituyo mi logger creado a mano por: app.use(morgan())
                        - Mostrará en consola las peticiones mediante mensajes que puedo modificar

                        - Dentro de la funcion morgan puedo añadir un texto que modificará esos mensajes
                            - morgan('tiny')

                            - morgan('dev')
                                - Muestra el metodo de la peticion
                                - La url
                                - El estado de la peticion
                                - El tiempo de respuesta de la peticion
                                - Y cuanto pesó la respuesta

                            - morgan('short')

            - Al enviar diferentes tipos de datos mediante REQUEST BODY tambien uso middlewares:

                - app.use(express.text()). Cuando recibo texto
                - app.use(express.json()). Cuando recibo un objeto json
                - app.use(express.urlencoded({extended: false})). Cuando recibo datos desde un formulario
                - Ver uso de estos ejemplos en index.js

            - En las pruebas de index.js donde envio
            - Existen diferentes middlewares de express para: 

                - Subir imágenes
                - Comprobar si el usuario tiene valor dentro de su peticion como cookies
                - Validar datos
                - .....

    - SETTINGS

        - Permite definir variables que estarán presentes durante todo el script y/o reconfigurar express
            - Se definen antes de los middlewares
            - Permite tener todas esas variables en el mismo lugar
            - Un ejemplo de reconfiguracion de express sería 'case sensitive routing'
                - No es usual.
                - Fuerza a que las rutas se escriban exactamente como se definieron para ser válidas
                - app.set('case sensitive routing', true)
                    - hace que una ruta definida como /Ruta solo sea valida si la escribo así en el navegador
                    - Si la dejo en false, que es el valor por defecto, /ruta sería válida

            - Existen módulos que necesitan de estas configuraciones para funcionar

        - Se definen al principio del script mediante el método set y se accede a ellas mediante el método get

        - Ej: 
            const express = require("express")
            const app = express()
            app.set('vble', valor)
            app.get('vble')

        - Ver ejemplo en index.js

    - STATIC FILES

        - Si quiero enviar mas de un archivo es mejor no usar el método sendFile. Sería muy tedioso.
        - Es mejor crear una carpeta publica donde almacenar los archivos index.html, estilos.css, index.js, ...
            - Y esos archivos pasarán a ser publicos            

        - Para ello usaré el middleware static propio de express donde almacenaré los archivos mencionados

            - Al declarar el middleware añadiré la ruta publica como prefijo y lo haré al final de las rutas publicas
            - Si existieran dos archivos con el mismo nombre el prefijo me permitirá dirijirme a uno u otro
            - En el proyecto existen dos archivos llamados note.txt, uno privado y otro público
            - El archivo index.js situado en /tutoriales/express/conceptosBasicos hay un ejemplo del uso de este middleware

        - Se pueden tener mas de una carpeta publica
            - Los proyectos hechos en react tienen la carpeta dist como publica
            - Y podemos añadir otra llamada upload donde tener los archivos que queramos compartir

    - MODULO path

        - Si quiero ordenar mejor todo mi código y dejarlo todo orgranizado en una carpeta src:        
        - Uso el modulo path para concatenar mi directorio por defecto con cada una de las carpetas publicas
        - Uso el objeto global __dirname que contiene la ruta absoluta desde mi unidad donde me encuentro
        - Añadir el método join para unir mi directorio por defecto y la carpeta publica correspondiente
        - Permitiría que si cambiamos la ubicacion de la carpeta src, la aplicación se mantenga
        - Ver como se aplica en el archivo index.js

    - EXPRESS ROUTER

        - Concepto router:

            - Permite tener varios archivos que contengan las rutas y no almacenarlas en uno solo
            - Creo muchos archivos y los unimos todos en una aplicación y los almaceno en una carpeta (router)

        - Módulo express router:

            - Express tiene un módulo llamado router que se encarga de esta gestion
            - Las rutas almacenadas en cada uno de los archivos seran exportadas
            - index.js, el archivo que antes las tenia todas, las importará un index.js y las usará

    - TEMPLATE ENGINE:

        - Tecnología que se añade al backend que permite crear múltiples paginas que comparten interfaces o datos
        - En español se podría traducir como "Un motor de plantillas"  
        - Permite procesar archivos html en el backend y enviarlos al frontend. 

        - Debo usarlo en caso de no usar react aplicando template engine de esta forma:
            - Envio desde el frontend información mediante request body, request params o request query
            - Recibe esto datos el servidor.
            - Hace su consulta en la bbdd
            - Obtiene datos que los envia mediante template engine y crea la pagina web de respuesta

        - Las páginas se suelen almacenar estas en una carpeta llamada views
            - Tienen la extension .ejs y la estructura basica de un html            

        - Configuración en settings.
            - Es necesario realizar una configuracion en settings del archivo server.js

            - Es necesario indicar en settings la carpeta y la ubicación de las carpeta que contiene las views
                - app.set('views'. path.join(__dirname, 'views'))
                
            - Debo indicar el motor de plantillas utilizado:
                - En este caso usarems ejs y lo indico así: app.set('view engine', 'ejs')

    - EJS
        - Uno de los modulos que permite implementar template engine que usare en esta app
        - Su documentación se encuentra en este enlace: https://ejs.co/
        - Se puede descargar desde: https://www.npmjs.com/package/ejs

        - Permite leer datos, combinarlos con el html y despues enviarlos al frontend
            - Usando para ello una sintaxis para interpretar datos o ejecutar logica de javascript
                - Son etiquetas con caracteres extraños
                    - <%= vble %>
                - Usar condicionales
                - Unir distintas porciones de html en una sola

            - Y usando el método render, puedo renderizar las paginas
    
        - Puedo obtener datos de una bbdd, renderizar una pagina y enviar dichos datos
            -Ej: res.render(pagina de la carpeta views, {Objeto con los datos})

        - Lo instalo mediante: npm i ejs
        - Lo importo mediante la linea: require('ejs') o import si uso ECS6

    - SI USO REACT, NO DEBO USAR TEMPLATE ENINGE:

        - En lugar de que Express renderice HTML con EJS, lo que harás es:

            1️⃣ React se encarga de la interfaz de usuario y se ejecuta en el navegador.
            2️⃣ Express actúa como un servidor API y solo envía JSON, no HTML.
            3️⃣ MongoDB almacena los datos y Express los consulta cuando React los necesita.

        - El flujo típico sería algo así:

            1️⃣ React hace una petición HTTP (fetch, axios, etc.) a Express.
            2️⃣ Express recibe la petición, consulta MongoDB y devuelve los datos en formato JSON.
            3️⃣ React recibe los datos y los muestra en la UI.



    VOY POR EL VIDEO EN LA HORA 3 Y 16 MINUTOS. EL MOTOR DE PLANTILLAS ESTÁ ANTICUADO SI YA USO REACT.
    QUIZAS NO CONTINUE APRENDIENDO DE ESTE VIDEO DEBIDO A SU FALTA DE USO.

    RECOMENDACION CHATGPT:
    Si tu meta con Express es construir APIs para consumir desde React, entonces olvídate de EJS y concéntrate en middleware, rutas, controladores, autenticación y bases de datos.    
    👉 Mi consejo: cambia de video y busca uno más enfocado en Express como backend para una aplicación React. Te evitarás aprender cosas innecesarias.

        