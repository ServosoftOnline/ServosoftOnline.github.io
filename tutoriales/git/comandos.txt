- Comandos de git
    - PARA LA INSTALACION
        
        - Configurar email de confirmación. Hay que poner la misma que hay en git
            - instrucciones en : https://docs.github.com/es/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address#configurar-tu-direcci%C3%B3n-de-correo-electr%C3%B3nico-de-confirmaci%C3%B3n-en-github
            - Entrar en github en el enlace: https://github.com/
            - Ir a settings / emails / Agregar
            - Establece el correo ppal
        
        - Agregar la clave ssh.
            - Copiar en el portapapeles el contenido de la clave.pub
            - Ir a settings/ SSH and GPG keys / Agregarla pegando el portatapeles

        - Crear un repositorio en github
            - Entrar en https://github.com/
            - Añadir un nuevo respositorio 
                - Ponerle el mismo nombre que el perfil de git hub y añadir .github.io. Mi caso Servosoft2016.github.io
                - Indicar public

        - Clonar el respositorio publico en el repositorio local
            - Entrar en git bash
            - Ir a la carpeta que lo contendrá y escribir: git clone https://github.com/servosoft2016/servosoft2016.github.io
            - Creará la carpeta repositorio local llamada servosoft2016.github.io
            - Añadimos el proyecto.
            - Si accedemos al sitio de internet servosoft2016.github.io Veremos el proyecto anterior
            - Si creamos una subcarpeta en el respositorio local y pegamos otro proyecto
            - Al acceder al sitio de internet servosoft2016.github.io/nuevoProyecto veremos el nuevo proyecto

        - Empujar los cambios al repositorio remoto
            - Realizar los cambios deseados en el repositorio local
            - Entrar en git bash
            - Asegurarnos que estamos dentro del repositorio local
            - Si escribimos git status nos informará si quedan cosas pendientes de Actualizar
            - Escribir: git add --all. Publicar todo lo git status indico que estaba pendiente
            - Escribir: git commit -m "mensaje". Hace el commit y añade el mensaje personalizado que suele indicar el cambio
            - Escribir: git push -u origin main
        
        - Instalar las dependencias
            - Están descritas en package.json
            - Escribir: npm install
    
    - PARA LA CONFIGURACIÓN
        - npm -v . Muestra si npm esta instalado indicando su versión.
        - git config --list --show-origin . Muestra la configuracion local y global
        - ls -al ~/.shh . Comprueba si existen claves shh en la carpeta C:/Users/usuario/.shh
        - ssh-keygen -t ed25519 -C "your_email@example.com" . Genera una clave ssh
        - git status. Muestra en que estado se encuentran los archivos, si estan modificados, pendientes de subir, ...

        - git config --global user.name "usuario". Establece el usuario global en gitbash. 
        - git config --global user.email "correo@correo.com". Establece el correo global en gitbash
        - git config  user.name "usuario". Establece el usuario local en el respositorio local en gitbush
        - git config  user.email "correo@correo.com". Establece el correo local en el respositorio local en gitbash

    - PARA ACTUALIZAR EL RESPOSITORIO REMOTO
        - git clone https://github.com/username/username.github.io. Clona un repositorio en local
        - git add --all. Prepara todas las modificaciones para subirlas
        - git commit -m "Initial commit". Termina de preparar las modificaciones y añade un comentario que quedará reflejado en github
        - git push -u origin main. Empuja todas las modificaciones al repositorio remoto
        - git pull origin main. Trae los cambios más recientes de la rama remota a tu rama local. 
            - Después de realizar git pull, se realiza una fusión automática con el repositorio local
            - Si se producen conflictos, Git te mostrará un mensaje para resolverlos manualmente.
            - Deberás abrir y editar los archivos en conflicto, resolver los conflictos
            - y luego realizar un commit para confirmar los cambios de fusión.
    
    - PARA MOVERTE
        - q. Cuando muestra alguna configuracion y quieres salir. 
        - cd. Entra en directorios
        - exit. Sale de git bash
   
    - PARA NODEJS
        - node -v. Muestra si esta nodejs instalado indicando su versión

    - PARA CREATE REACT APP
        - npx create-react-app nombre_de_la_aplicacion_sin_espacios_o_caracteres espaciales. 
        - npm start. Inicia el servidor local para ejecutar react

    
    - PROBLEMAS ENCONTRADOS Y SOLUCIONADOS:
        - git config --global --unset user.mail. Borra la configuracion global user.mail. Me confundí y la llame mail en lugar de email
        - git remote rename origin repo1. Renombra repositorios remotos. Renombra origin como repo1
        - git remote -v. Muestra los respositorios locales
    
    - PARA RESOLVER UN PROBLEMA CON LAS CREDECIALES.
        - Al hacer push desde el respositorio de ServosoftOnline, la credencial llamada Servosoft2016 me impedia hacerlo. Para solucionarlo:
            - Eliminé las credenciales desde el "Administrador de Credenciales" de Windows.
            - Puedes encontrarlo escribiendo "Administrador de Credenciales" en la barra de búsqueda de Windows.
            - Luego, busca las credenciales relacionadas con GitHub y elimínalas.

    - PARA RESOLVER UN PROBLEMA SOBRE ARCHIVOS ELIMINADOS
        - git rm ruta_del_archivo que indica git status
        - Un commit y un push

    - RESOLUCION DE UN PROBLEMA DE PERMISOS PARA USAR ROLLUP:
        - Lo resolví con este comando restaurando los permisos: chmod +x ./node_modules/.bin/rollup

        






    
